---
# Initial Step:
#
# Schedule a new job giving a specific topic and specifying the remote CI.
# The return of this action contains all the data associated with the job,
# we hence register those data for later consumptions
#
- hosts: localhost
- name: 'Sanity check'
  hosts: localhost
  tags:
    - new
  vars:
    dci_status: 'new'
  tasks:
    - block:
        - name: Clean the files
          include_tasks: plays/cleanup.yml

        - name: Check the jumpbox sanity
          include_tasks: plays/sanity_check.yml

        - name: Purge old components
          include_tasks: plays/purge_cache.yml

        - name: Setup the http mirror
          include_tasks: plays/prepare_local_mirror.yml

      rescue:
        - name: Run the failure process
          include_tasks: plays/failure.yml

# Pre-run state
#
# User is free to do whaterver she needs before entering pre-run state.
# Usually this is used to boot (not provision) the undercloud
#
- name: 'Spawning the environment'
  hosts: localhost
  tags:
    - pre-run
  vars:
    dci_status: 'pre-run'
  tasks:
    - block:
        - name: Run the pre-run process
          include_tasks: '{{ dci_config_dir }}/hooks/pre-run.yml'

      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Run state
#
# User is free to do whaterver she needs before entering running state.
# Usually this is used to provision both undercloud and the overcloud.
#
- name: 'Provision the undercloud and the overcloud'
  hosts: localhost
  tags:
    - running
  vars:
    dci_status: 'running'
  tasks:
    - block:
        - name: Run the running process
          include_tasks: '{{ dci_config_dir }}/hooks/running.yml'

        - name: Add undercloud to inventory
          include_tasks: plays/register_undercloud_host.yml

      rescue:
        # Included a second time in case of failure in hooks/running.yml,
        # this is required for collect-logs to work
        - name: Add undercloud to inventory
          include_tasks: plays/register_undercloud_host.yml
        - name: Run the collect logs process
          include_tasks: plays/collect_logs.yml
        - name: Run the upload logs process
          include_tasks: plays/upload_logs.yml

        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Clean the files
          include_tasks: plays/cleanup.yml

        - name: Run the failure process
          include_tasks: plays/failure.yml


# Post-run state
#
# User is free to do whaterver she needs before entering post-run state.
# Usually this is used to run tests, certifications, etc...
#
- name: 'Openstack specific tests'
  hosts: undercloud
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - block:
        - name: Run tests suite
          include_tasks: plays/run_tests.yml

      rescue:
        - name: Run the collect logs process
          include_tasks: plays/collect_logs.yml
        - name: Run the upload logs process
          include_tasks: plays/upload_logs.yml

        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Clean the files
          include_tasks: plays/cleanup.yml

        - name: Run the failure process
          include_tasks: plays/failure.yml

- name: 'Partner-specific tests'
  hosts: undercloud
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - name: Run the local tests process
      include_tasks: "{{ dci_config_dir }}/hooks/local_tests.yml"
      ignore_errors: yes

- name: 'Collect Openstack logs'
  hosts: undercloud:overcloud
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
    undercloud_user: stack
    working_dir: "/home/{{ undercloud_user }}"
    local_working_dir: "{{ lookup('env', 'HOME') }}/.quickstart"
    artcl_collect_dir: "{{ local_working_dir }}/collected_files"
    artcl_gzip_only: false
    artcl_tar_gz: true
  roles:
    - collect-logs

- name: 'Upload results and logs'
  hosts: localhost
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - name: Run the upload logs process
      include_tasks: plays/upload_logs.yml

- name: 'Update the deployment'
  hosts: localhost
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - block:
        - name: Schedule an update job
          dci_job:
            id: '{{ job_info.job.id }}'
            update: True
          register: new_job_info
        # NOTE(Gon√©ri): avoid https://github.com/ansible/ansible/issues/4297
        - set_fact:
            job_info: '{{ new_job_info }}'
          when: new_job_info.skipped is not defined

        - name: Download and setup components
          include_tasks: plays/fetch_bits.yml

        - name: Run the update process
          include_tasks: '{{ update_playbook }}'
      when: update_playbook_stat.stat.exists

      rescue:
        - name: Run the collect logs process
          include_tasks: plays/collect_logs.yml
        - name: Run the upload logs process
          include_tasks: plays/upload_logs.yml

        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Clean the files
          include_tasks: plays/cleanup.yml

        - name: Run the failure process
          include_tasks: plays/failure.yml

- name: 'Openstack specific tests after an Update'
  hosts: undercloud
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - block:
        - name: Run tests suite
          include_tasks: plays/run_tests.yml
      when: hostvars.localhost.update_playbook_stat.stat.exists

      rescue:
        - name: Run the collect logs process
          include_tasks: plays/collect_logs.yml
        - name: Run the upload logs process
          include_tasks: plays/upload_logs.yml

        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Clean the files
          include_tasks: plays/cleanup.yml

        - name: Run the failure process
          include_tasks: plays/failure.yml

- name: 'Upgrade the deployment'
  hosts: localhost
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - block:
        - name: Schedule an upgrade job
          dci_job:
            id: '{{ job_info.job.id }}'
            upgrade: True
          register: new_job_info
        - set_fact:
            job_info: '{{ new_job_info }}'
          when: new_job_info.skipped is not defined

        - name: Download and setup components
          include_tasks: plays/fetch_bits.yml

        - name: Run the upgrade process
          include_tasks: '{{ upgrade_playbook }}'
      when: upgrade_playbook_stat.stat.exists

      rescue:
        - name: Run the collect logs process
          include_tasks: plays/collect_logs.yml
        - name: Run the upload logs process
          include_tasks: plays/upload_logs.yml

        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Clean the files
          include_tasks: plays/cleanup.yml

        - name: Run the failure process
          include_tasks: plays/failure.yml

- name: 'Openstack specific tests after an Upgrade'
  hosts: undercloud
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - block:
        - name: Run tests suite
          include_tasks: plays/run_tests.yml
      when: hostvars.localhost.upgrade_playbook_stat.stat.exists

      rescue:
        - name: Run the collect logs process
          include_tasks: plays/collect_logs.yml
        - name: Run the upload logs process
          include_tasks: plays/upload_logs.yml

        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Clean the files
          include_tasks: plays/cleanup.yml

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Success state
#
# User is free to do whaterver she needs before entering pre-run state.
# Usually this is used to teardown the plateform
#
- name: 'Successful installation'
  hosts: localhost
  tags:
    - success
  vars:
    dci_status: 'success'
  tasks:
    - name: Run the success process
      include_tasks: "{{ dci_config_dir }}/hooks/success.yml"

    - name: Run the teardown process
      include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"

    - name: Clean the files
      include_tasks: plays/cleanup.yml
